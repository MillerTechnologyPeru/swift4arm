diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp /mnt/SWIFT/4.1/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp
--- /mnt/SWIFT/4.1_ORIGINAL/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp	2018-05-05 20:47:58.690147442 +0200
+++ /mnt/SWIFT/4.1/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp	2018-05-03 18:29:46.052996300 +0200
@@ -486,6 +486,9 @@
         (support::ulittle32_t::ref{TargetPtr} & ~0x000F0FFF) | (Value & 0xFFF) |
         (((Value >> 12) & 0xF) << 16);
     break;
+  case ELF::R_ARM_REL32:
+    *TargetPtr += Value - FinalAddress;
+    break;
     // Write 24 bit relative value to the branch instruction.
   case ELF::R_ARM_PC24: // Fall through.
   case ELF::R_ARM_CALL: // Fall through.
@@ -1197,6 +1200,19 @@
                           RelType, 0);
         Section.advanceStubOffset(getMaxStubSize());
       }
+    } else if (RelType == ELF::R_ARM_GOT_PREL) {
+      uint32_t GOTOffset = allocateGOTEntries(1);
+
+      RelocationEntry GOTRE(SectionID, Offset, ELF::R_ARM_REL32, GOTOffset);
+      addRelocationForSection(GOTRE, GOTSectionID);
+
+      // Fill in the value of the symbol we're targeting into the GOT
+      RelocationEntry RE = computeGOTOffsetRE( GOTOffset,
+                                              Value.Offset, ELF::R_ARM_ABS32);
+      if (Value.SymbolName)
+        addRelocationForSymbol(RE, Value.SymbolName);
+      else
+        addRelocationForSection(RE, Value.SectionID);
     } else {
       uint32_t *Placeholder =
         reinterpret_cast<uint32_t*>(computePlaceholderAddress(SectionID, Offset));
diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/swift/stdlib/public/SwiftShims/RefCount.h /mnt/SWIFT/4.1/swift/stdlib/public/SwiftShims/RefCount.h
--- /mnt/SWIFT/4.1_ORIGINAL/swift/stdlib/public/SwiftShims/RefCount.h	2018-05-05 20:47:55.478188106 +0200
+++ /mnt/SWIFT/4.1/swift/stdlib/public/SwiftShims/RefCount.h	2018-05-11 20:50:46.816738471 +0200
@@ -1302,7 +1302,7 @@
 
   public:
   HeapObjectSideTableEntry(HeapObject *newObject)
-    : object(newObject), refCounts()
+    : object(newObject), refCounts(RefCounts<SideTableRefCountBits>::Initialized)
   { }
 
 #pragma clang diagnostic push
diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/swift/stdlib/public/runtime/Heap.cpp /mnt/SWIFT/4.1/swift/stdlib/public/runtime/Heap.cpp
--- /mnt/SWIFT/4.1_ORIGINAL/swift/stdlib/public/runtime/Heap.cpp	2018-05-05 20:47:55.478188106 +0200
+++ /mnt/SWIFT/4.1/swift/stdlib/public/runtime/Heap.cpp	2018-05-13 10:36:08.062213374 +0200
@@ -50,8 +50,7 @@
 
 
 
-void *swift::swift_slowAlloc(size_t size, size_t alignMask)
-    SWIFT_CC(RegisterPreservingCC_IMPL) {
+void *swift::swift_slowAlloc(size_t size, size_t alignMask) {
   void *p;
   if (alignMask <= MALLOC_ALIGN_MASK) {
     p = malloc(size);
@@ -62,8 +61,7 @@
   return p;
 }
 
-void swift::swift_slowDealloc(void *ptr, size_t bytes, size_t alignMask)
-    SWIFT_CC(RegisterPreservingCC_IMPL) {
+void swift::swift_slowDealloc(void *ptr, size_t bytes, size_t alignMask) {
   if (alignMask <= MALLOC_ALIGN_MASK) {
     free(ptr);
   } else {
diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/swift/stdlib/public/runtime/HeapObject.cpp /mnt/SWIFT/4.1/swift/stdlib/public/runtime/HeapObject.cpp
--- /mnt/SWIFT/4.1_ORIGINAL/swift/stdlib/public/runtime/HeapObject.cpp	2018-05-04 22:49:38.375144263 +0200
+++ /mnt/SWIFT/4.1/swift/stdlib/public/runtime/HeapObject.cpp	2018-05-10 20:40:52.161554537 +0200
@@ -43,7 +43,7 @@
 #include "swift/Runtime/ObjCBridge.h"
 #endif
 #include "Leaks.h"
-
+#include <iostream>
 using namespace swift;
 
 /// Returns true if the pointer passed to a native retain or release is valid.
@@ -797,9 +797,11 @@
   assert(object->refCounts.isDeiniting());
   SWIFT_RT_TRACK_INVOCATION(object, swift_deallocObject);
 #ifdef SWIFT_RUNTIME_CLOBBER_FREED_OBJECTS
+  
   memset_pattern8((uint8_t *)object + sizeof(HeapObject),
                   "\xAB\xAD\x1D\xEA\xF4\xEE\xD0\bB9",
                   allocatedSize - sizeof(HeapObject));
+  
 #endif
 
   // If we are tracking leaks, stop tracking this object.
diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/swift-corelibs-foundation/CoreFoundation/Base.subproj/CFRuntime.c /mnt/SWIFT/4.1/swift-corelibs-foundation/CoreFoundation/Base.subproj/CFRuntime.c
--- /mnt/SWIFT/4.1_ORIGINAL/swift-corelibs-foundation/CoreFoundation/Base.subproj/CFRuntime.c	2018-05-05 20:47:56.806171291 +0200
+++ /mnt/SWIFT/4.1/swift-corelibs-foundation/CoreFoundation/Base.subproj/CFRuntime.c	2018-05-13 20:03:41.646311464 +0200
@@ -382,7 +382,7 @@
     uintptr_t isa = __CFRuntimeObjCClassTable[typeID];
     CFIndex size = sizeof(CFRuntimeBase) + extraBytes;
     CFRuntimeClass *cls = __CFRuntimeClassTable[typeID];
-    size_t align = (cls->version & _kCFRuntimeRequiresAlignment) ? cls->requiredAlignment : 16;
+    size_t align = (cls->version & _kCFRuntimeRequiresAlignment) ? cls->requiredAlignment : 16; // TODO: Is this for 32Bit system also valid?
     
     CFRuntimeBase *memory = (CFRuntimeBase *)swift_allocObject(isa, size, align - 1);
     
@@ -391,6 +391,7 @@
     
     // Set up the cfinfo struct
     uint32_t *cfinfop = (uint32_t *)&(memory->_cfinfoa);
+ 
     // The 0x80 means we use the default allocator
     *cfinfop = (uint32_t)(((uint32_t)typeID << 8) | (0x80));
     
diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/swift-corelibs-foundation/CoreFoundation/Base.subproj/CFRuntime.h /mnt/SWIFT/4.1/swift-corelibs-foundation/CoreFoundation/Base.subproj/CFRuntime.h
--- /mnt/SWIFT/4.1_ORIGINAL/swift-corelibs-foundation/CoreFoundation/Base.subproj/CFRuntime.h	2018-05-04 22:49:46.247043970 +0200
+++ /mnt/SWIFT/4.1/swift-corelibs-foundation/CoreFoundation/Base.subproj/CFRuntime.h	2018-05-13 22:49:57.111220496 +0200
@@ -196,10 +196,20 @@
     uint32_t _swift_strong_rc;
     uint32_t _swift_weak_rc;
     // This is for CF's use, and must match _NSCFType layout
+#if __LP64__
     _Atomic(uint64_t) _cfinfoa;
+#else
+    _Atomic(uint32_t) _cfinfoa;
+#endif
+
 } CFRuntimeBase;
 
+
+#if __LP64__
 #define INIT_CFRUNTIME_BASE(...) {0, _CF_CONSTANT_OBJECT_STRONG_RC, 0, 0x0000000000000080ULL}
+#else
+#define INIT_CFRUNTIME_BASE(...) {0, _CF_CONSTANT_OBJECT_STRONG_RC, 0, 0x00000080UL}
+#endif
 
 #else
 
diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/swift-corelibs-libdispatch/src/CMakeLists.txt /mnt/SWIFT/4.1/swift-corelibs-libdispatch/src/CMakeLists.txt
--- /mnt/SWIFT/4.1_ORIGINAL/swift-corelibs-libdispatch/src/CMakeLists.txt	2018-05-05 20:47:54.806196617 +0200
+++ /mnt/SWIFT/4.1/swift-corelibs-libdispatch/src/CMakeLists.txt	2018-05-05 20:09:19.880649139 +0200
@@ -207,6 +207,13 @@
                    COMMAND cmake -E copy $<TARGET_FILE:dispatch> .libs
                    COMMENT "Copying libdispatch to .libs")
 
+
+
+set(ARCH_SYSTEM  ${CMAKE_SYSTEM_PROCESSOR})
+if (${CMAKE_SYSTEM_PROCESSOR} MATCHES "^armv7*")
+	set(ARCH_SYSTEM "armv7")
+endif()
+
 install(TARGETS
           dispatch
         DESTINATION
@@ -216,6 +223,6 @@
             ${CMAKE_CURRENT_BINARY_DIR}/swift/Dispatch.swiftmodule
             ${CMAKE_CURRENT_BINARY_DIR}/swift/Dispatch.swiftdoc
           DESTINATION
-            "${INSTALL_TARGET_DIR}/${CMAKE_SYSTEM_PROCESSOR}")
+            "${INSTALL_TARGET_DIR}/${ARCH_SYSTEM}")
 endif()
 
diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/swiftpm/Sources/Build/Triple.swift /mnt/SWIFT/4.1/swiftpm/Sources/Build/Triple.swift
--- /mnt/SWIFT/4.1_ORIGINAL/swiftpm/Sources/Build/Triple.swift	2018-05-05 20:47:55.806183953 +0200
+++ /mnt/SWIFT/4.1/swiftpm/Sources/Build/Triple.swift	2018-05-04 04:04:21.944479656 +0200
@@ -111,6 +111,8 @@
     public static let hostTriple: Triple = .macOS
   #elseif os(Linux) && arch(s390x)
     public static let hostTriple: Triple = try! Triple("s390x-unknown-linux")
+  #elseif os(Linux) && arch(arm)
+    public static let hostTriple: Triple = try! Triple("armv7-unknown-linux-gnueabihf")
   #else
     public static let hostTriple: Triple = .linux
   #endif
diff -Naur -x '*.o' -x '*.so' -x '*.exe' -x '*.pdf' -x '*.swp' -x '*.tgz' -x 'build*' -x 'install*' -x '.build*' -x '.git*' -x '.ninja_log*' /mnt/SWIFT/4.1_ORIGINAL/swiftpm/Utilities/bootstrap /mnt/SWIFT/4.1/swiftpm/Utilities/bootstrap
--- /mnt/SWIFT/4.1_ORIGINAL/swiftpm/Utilities/bootstrap	2018-05-05 20:47:55.806183953 +0200
+++ /mnt/SWIFT/4.1/swiftpm/Utilities/bootstrap	2018-05-05 20:11:10.979563563 +0200
@@ -889,10 +889,13 @@
             raise SystemExit("unknown build action: %r" % (action,))
 
     # Compute the build paths.
+    # Put here new System like ARMv6
     if platform.system() == 'Darwin':
         build_target = "x86_64-apple-macosx10.10"
     elif platform.processor() == 's390x':
         build_target = "s390x-unknown-linux"
+    elif platform.system().lower() == 'linux' and platform.machine().lower().startswith('armv7'):
+         build_target = 'armv7-unknown-linux-gnueabihf'
     else:
         build_target = 'x86_64-unknown-linux'
 
@@ -1068,6 +1071,7 @@
     swiftpm_xctest_helper_path = os.path.join(
         target_path, conf, "swiftpm-xctest-helper")
 
+
     # If testing, run each of the test bundles.
     if "test" in build_actions:
         # Construct the test environment.
@@ -1109,7 +1113,7 @@
             # Install the main executables.
             for product_path in [swift_package_path, swift_build_path,
                                  swift_test_path, swift_run_path]:
-                installBinary(product_path, bin_install_path, args.swiftc_path)
+		installBinary(product_path, bin_install_path, args.swiftc_path)
 
             # Install the runtimes.
             for version, runtime in processed_runtimes.items():
@@ -1156,7 +1160,8 @@
         # FIXME: This shouldn't require so much knowledge of the manifest.
         # FIXME: We should handle what happens if it's a static library.
         src_path = os.path.join(target_path, conf, libswiftpm_product.product_name)
-        installBinary(src_path, libswiftpm_library_dir, args.swiftc_path)
+        
+	installBinary(src_path, libswiftpm_library_dir, args.swiftc_path)
         
         # If it's a dynamic library, and if we're on Darwin, fix the dylib id.
         if platform.system() == 'Darwin':
@@ -1190,6 +1195,7 @@
         target_map = dict((t.name, t) for t in targets)
         for target_name in libswiftpm_product.targets:
             target = target_map[target_name]
+
             if target.is_c:
                 # Skip if requested.
                 if args.libswiftpm_skip_c_headers:
